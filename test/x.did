type TxId = nat;
type Account = record { owner : principal; subaccount : opt blob };
type SubAccount = blob;
type Transaction = record {
      kind : text;
      mint : opt record {
            amount : nat;
            to : Account;
            memo : opt blob;
            created_at_time : opt nat64;
      };
      burn : opt record {
            amount : nat;
            from : Account;
            memo : opt blob;
            created_at_time : opt nat64;
      };
      transfer : opt record {
            amount : nat;
            from : Account;
            to : Account;
            memo : opt blob;
            created_at_time : opt nat64;
            fee : opt nat;
      };
      timestamp : nat64;
};
type GetAccountTransactionsArgs = record {
      account : Account;
      start : opt TxId;
      max_results : nat;
};
type TransactionWithId = record { id : TxId; transaction : Transaction };
type GetTransactions = record {
      transactions : vec TransactionWithId;
      oldest_tx_id : opt TxId;
};
type GetTransactionsErr = record { message : text };
type GetTransactionsResult = variant {
      Ok : GetTransactions;
      Err : GetTransactionsErr;
};
type ListSubaccountsArgs = record { owner : principal; start : opt SubAccount };
type InitArgs = record { ledger_id : principal };
service : (InitArgs) -> {
      get_account_transactions : (GetAccountTransactionsArgs) -> (GetTransactionsResult);
      ledger_id : (principal) -> () query;
      list_subaccounts : (ListSubaccountsArgs) -> (vec SubAccount) query;
};
